@model Kiinteistosovellus.Models.Contractors


<div class="modal fade" id="ModalContractorCreate">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <h3>Luo uusi urakoitsija</h3>
            </div>
            <div class="modal-body">

                @using (Html.BeginForm("Create", "Contractors", FormMethod.Post, new { id = "createForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="row">

                            <div class="col-sm-6">

                                <div class="form-group">
                                    Nimi
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    Kuvaus
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "6", @maxlength = "300" })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    Osoite
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.StreetAdress, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.StreetAdress, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    Postinumero
                                    <div class="col-md-10">
                                        @Html.DropDownList("PostID", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.PostID, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                                @*Temporary solution for LoginID until Login system is done*@
                                @Html.TextBoxFor(model => model.LoginID, "LoginID", new { @class = "form-control", @Value = ViewBag.LoginID, @Hidden = "true" })

                            </div>

                        </div>

                    </div>
                }

            </div>
            <div class="modal-footer">
                <div class="form-actions no-color">
                    <input type="button" onclick="submitModal()" value="Lisätä" class="btn btn-primary" />
                    @Html.ActionLink("Takaisin", "Index")
                </div>
            </div>
            <div id="divForPartialPseudo" style="display:none;">

            </div>

        </div>
    </div>
</div>
<script type="text/javascript">
    var indexUrl = '/Contractors/Index'; //Indexin url-osoite, johon submitModal siirtyy onnistuneen lisäyksen jälkeen

    //Ajax-pyynnöllä submitataan modaali ja luodaan se uudestaan pääsivulle
    function submitModal() {
        var form = new FormData(document.getElementById("createForm"));     //Luodaan formdata-tyyppinen muuttuja, joka kerää tiedot halutulta formilta
        var detailDivCreate = parent.document.getElementById("ModalContractorCreate"); //Etsitään parentista eli index-viewstä oikea kohta, johon modaali luodaan uudestaan

        $.ajax({
            url: "/Contractors/_ModalCreate",
            cache: false,
            contentType: false,
            processData: false,
            method: 'POST', //post pitää spesifioida tässä, jotta saadaan post-tyyppinen toiminto controllerissa
            type: "POST",
            data: form, //aikaisemmin mainittu formdata viedään ajax-pyynnöllä controllerille
            success: function (result) {
                console.log("Result:")
                console.log(result);
                if (result == "") { //Jos lisäys onnistui, controller palauttaa nullin
                    window.location.href = indexUrl; //Onnistumisen jälkeen käyttäjä ohjataan indexiin, jossa päivittyneet tiedot
                } else {//tallentaminen ei onnistunut, koska modelstate.isvalid ei ollut true
                    $(detailDivCreate).html(""); //tyhjennetään vanha modaali (en tiedä, onko pakollista)
                    $(detailDivCreate).replaceWith(result); //luodaan uusi modaali, jossa validate messaget
                    $("#ModalContractorCreate").modal("show");//näytetään modaali
                }

            }
        });
    };


</script>



