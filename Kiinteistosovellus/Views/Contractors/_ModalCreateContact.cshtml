@model Kiinteistosovellus.Models.Contacts

<div class="modal fade" id="ModalContactCreate">
    <div class="modal-dialog modal-dialog-centered" id="modalWindow">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Luo uusi yhteystiedot</h3>
            </div>

            <div class="modal-body">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "createForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <div id="rowDiv">
                            <div id="colDiv1">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                <b id="yhteystiedot" style="display:none">Uusi yhteystiedot<br /></b>

                                <div class="form-group">
                                    Urakoitsija
                                    <div class="col-md-10">
                                        @Html.DropDownList("ContractorID", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ContractorID, "", new { @class = "text-danger" })
                                        <div class="text-danger" id="noContractorInfo" style="display:none">Urakoitsija vaaditaan</div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    Henkilö
                                    <div class="col-md-10">
                                        @Html.DropDownList("PersonID", null, htmlAttributes: new { @class = "form-control", id = "lePerson" })
                                        @Html.ValidationMessageFor(model => model.PersonID, "", new { @class = "text-danger" })
                                        <div style="text-align:right; padding-right:110px"><a class="card-link" role="button" id="lisaaUusiHiddenField">Lisää uusi henkilö</a></div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    Puhelinumero<div class="text-danger" id="wrongPhone" style="display:none">, kirjoita oikea puhelinnumero</div>
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", @id = "phone" } })
                                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    Sähköposti<div class="text-danger" id="wrongEmail" style="display:none">, oikea muoto: käyttäjätunnus@domain.fi</div>
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "mail" } })
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @*Temporary solution for LoginID until Login system is done*@
                                @Html.TextBoxFor(model => model.LoginID, "LoginID", new { @class = "form-control", @Value = ViewBag.LoginID, @Hidden = "true" })
                                <div class="text-danger" id="noContactInfo" style="display:none">Puhelinnumero tai sähköpostiosoite vaaditaan</div>
                            </div>

                            <div id="colDiv2">
                                @*Opens PartialView for Persons*@
                                <div id="divForPartialPseudo" style="display:none; width:100%;"></div>

                                @*Opens if model is valid and database is being updated*@
                                <div class="form-group" id="successfullyAddedPerson" style="display:none; padding:90px 40px">
                                    <div class="text-success">Henkilö lisätty onnistuneesti</div>
                                    <div style="padding:0 3px"><a class="card-link" role="button" id="lisaaToinenHenkilo">Lisää uusi henkilö</a> | <a class="card-link closeAddPerson" role="button">Peruuta</a></div>
                                </div>
                            </div>

                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <div class="form-actions no-color">
                    <input type="button" value="Lisää yhteystiedot" id="submitDataModal" class="btn btn-primary" />
                    <a href="/Contractors/Index" class="card-link" role="button">Takaisin</a>
                </div>
            </div>
            <div id="divForPartialPseudo" style="display:inline-block;"></div>
        </div>
    </div>
</div>
<script type="text/javascript">

    //Submiting Contact + validation
    $("#submitDataModal").click(function () {
        var telephone = $("#phone").val();
        var email = $("#mail").val();
        var mailFormat = /^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        var phoneFormat = /^[+]?[\s./0-9]*[(]?[0-9]{1,4}[)]?[-\s./0-9]*$/g;
        if ((telephone == "" && email == "") || contractors.val() == "" || (!email.match(mailFormat) && email != "")  || (!telephone.match(phoneFormat) && telephone != "")) {
            if (telephone != "" || email != "") {
                document.getElementById("noContactInfo").style.display = "none";
            }
            else {
                document.getElementById("noContactInfo").style.display = "inline-block";
            }

            if (contractors.val() != "") {
                document.getElementById("noContractorInfo").style.display = "none";
            }
            else {
                document.getElementById("noContractorInfo").style.display = "inline-block";
            }

            if (!email.match(mailFormat) && email != "") {
                console.log("email wrong")
                document.getElementById("wrongEmail").style.display = "inline-block";
            }
            else {
                document.getElementById("wrongEmail").style.display = "none";
            }

            if (!telephone.match(phoneFormat) && telephone != "") {
                console.log("phone wrong")
                document.getElementById("wrongPhone").style.display = "inline-block";
            }
            else {
                document.getElementById("wrongPhone").style.display = "none";
            }
        }
        else {
            submitModalPost("Contractors", "CreateContact", "createForm", "ModalContactCreate");
            document.getElementById("noContactInfo").style.display = "none";
            document.getElementById("noContractorInfo").style.display = "none";
        }
    });

    //Opens Persons PartialView and widens modal window
    $("#lisaaUusiHiddenField").click(function () {
        partialViewGet("Contractors", "CreatePerson", "divForPartialPseudo");
        $("#modalWindow").addClass("modal-lg");
        $("#rowDiv").addClass("row");
        $("#colDiv1").addClass("col-sm-6");
        $("#colDiv2").addClass("col-sm-6");
        document.getElementById("divForPartialPseudo").style.display = "inline-block";
        document.getElementById("lisaaUusiHiddenField").style.display = "none";
        document.getElementById("yhteystiedot").style.display = "inline-block";
    });

    //Opens Persons PartialView if user wants to add another Person after previous successful try
    $("#lisaaToinenHenkilo").click(function () {
        partialViewGet("Contractors", "CreatePerson", "divForPartialPseudo");
        document.getElementById("lisaaUusiHiddenField").style.display = "none";
        document.getElementById("successfullyAddedPerson").style.display = "none";
        document.getElementById("yhteystiedot").style.display = "inline-block";
    });

    //Closes Persons PartialView and makes modal smaller again
    $(".closeAddPerson").click(function () {
        document.getElementById("yhteystiedot").style.display = "none";
        document.getElementById("lisaaUusiHiddenField").style.display = "block";
        document.getElementById("divForPartialPseudo").innerHTML = "";
        document.getElementById("successfullyAddedPerson").style.display = "none";
        $("#modalWindow").removeClass("modal-lg");
        $("#rowDiv").removeClass("row");
        $("#colDiv1").removeClass("col-sm-6");
        $("#colDiv2").removeClass("col-sm-6");
    });

    //Removes Contractor 1004 from dropdown list, as 1004 is deleted value
    $(function () {
        $("#ContractorID option[value='1004']").remove();
    })

    //---Dropdowns part---
    var contractorUrl = '@Url.Action("FetchContractors")';
	var personUrl = '@Url.Action("FetchPersons")';
    var persons1 = $('#lePerson');
    var contractors = $('#ContractorID');

    //When Contractors dropdown changes value, empty Persons dropdown and populate it with empty value and Persons from given Contractor
	$('#ContractorID').change(function() {
        persons1.empty();
        if ($(this).val() != "") {
            $.getJSON(personUrl, { ID: $(this).val() }, function (data) {
                if (!data) {
                    persons1.empty();
                }
                persons1.append($('<option></option>').val('').text(''));
                $.each(data, function (index, item) {
                    persons1.append($('<option></option>').val(item.Value).text(item.Text));
                });
            });
        }
    })

    //When modal is shown, empty Persons and Contractors dropdown, then populate Contractors dropdown with empty value and Contractorx except 1004.
    const myModalEl = document.getElementById('ModalContactCreate')
    myModalEl.addEventListener('shown.bs.modal', event => {
        persons1.empty();
        contractors.empty();
        contractors.append($('<option></option>').val('').text(''));
        $.getJSON(contractorUrl, function (data) {
            $.each(data, function (index, item) {
                if (item.Value != 1004) {
                    contractors.append($('<option></option>').val(item.Value).text(item.Text));
                }
            });
        });
    })
</script>