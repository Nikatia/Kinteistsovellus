@model Kiinteistosovellus.Models.MonthlySpendings






<div class="modal fade" id="ModalMSCreate">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Luo uusi kuukausittainen kulu</h2>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("_CreateModal", "MonthlySpendings", FormMethod.Post, new { id = "createMSForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @*<h4>MonthlySpendings</h4>*@
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.DateBegin, "Aloituspäivämäärä", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DateBegin, new { htmlAttributes = new { @Type = "date", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DateBegin, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateEnd, "Päättymispäivämäärä", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DateEnd, new { htmlAttributes = new { @Type = "date", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DateEnd, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.SpendingTypeID, "Kulutustyyppi", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("SpendingTypeID", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SpendingTypeID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AmountOfUnits, "Kokonaiskulutus", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @{ Html.EnableClientValidation(false); }
                                @Html.EditorFor(model => model.AmountOfUnits, new { htmlAttributes = new { @class = "form-control" } })
                                @{ Html.EnableClientValidation(true); }
                                @Html.ValidationMessageFor(model => model.AmountOfUnits, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PricePerUnit, "Yksikköhinta", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @{ Html.EnableClientValidation(false); }
                                @Html.EditorFor(model => model.PricePerUnit, new { htmlAttributes = new { @class = "form-control" } })
                                @{ Html.EnableClientValidation(true); }
                                @Html.ValidationMessageFor(model => model.PricePerUnit, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TransferPayment, "Siirtomaksu", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @{ Html.EnableClientValidation(false); }
                                @Html.EditorFor(model => model.TransferPayment, new { htmlAttributes = new { @class = "form-control" } })
                                @{ Html.EnableClientValidation(true); }
                                @Html.ValidationMessageFor(model => model.TransferPayment, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FullPrice, "Kokonaishinta", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @{ Html.EnableClientValidation(false); }
                                @Html.EditorFor(model => model.FullPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @{ Html.EnableClientValidation(true); }
                                @Html.ValidationMessageFor(model => model.FullPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ContractorID, "Yrityksen nimi", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("ContractorID", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ContractorID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div>
                            @Html.TextBoxFor(model => model.LoginID, "LoginID", htmlAttributes: new { @Value = ViewBag.LoginID, @Hidden = "true", @class = "form-control" })
                        </div>

                    </div>
                }



                @section Scripts {
                    @Scripts.Render("~/bundles/jqueryval")
                }


                <div class="modal-footer" style="display:inline-block">
                    <input type="button" onclick="submitModal()" value="Tallenna" class="btn btn-primary" />
                    @*<button type="submit" class="btn btn-primary" form="createMSForm">Tallenna</button>*@
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Takaisin</button>

                </div>
                <div id="divForPartialPseudo" style="display:none;">

                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    var indexUrl = '/MonthlySpendings/Index'; //Indexin url-osoite, johon submitModal siirtyy onnistuneen lisäyksen jälkeen

    //Kun dokumentti on latautunut, modaaliin luodaan alas partialview ajax-koodilla. Ei onnistunut suoraan html-bodyyn razorilla luominen, koska sitten ajax-pyynnöt ei toimi oikein
    $(document).ready(function () {
        var divForPartial = $("#divForPartialPseudo"); //Se kohta dokumentissa, minne partial view lisätään
        $.ajax({
            url: "/MonthlySpendings/_CreateModal", //Haetaan haluttu controller-action
            cache: false,
            contentType: false,
            processData: false,
            method: 'get', //pitää spesifioida get, jos halutaan get-tyyppinen toiminto
            type: "get",
            success: function (result) {
                $(divForPartial).html(""); //kaiken varalta tyhjennetään ensin partial view kohta
                $(divForPartial).html(result); //sitten se täytetään partialViewResultista saadulla partial viewillä
            }
        });
    });

    //Pseudo-kenttä päivittää oikean formin kentän tällä toiminnolla
    function paivitaOikeaKentta() {
        var falseFormInput = $("#pseudoForm");
        var realForm = $("#TypeName");
        realForm.val(falseFormInput.val());
    }

    //Tuo tyypinlisäyskentän näkyviin---- TÄTÄ PITÄÄ  PÄIVITTÄÄ TYYLIKKÄÄMMÄKSI
    $("#lisaaUusiHiddenField").click(function () {
        console.log("toimii");
        if (document.getElementById("hiddenFieldAddType").style.display == "none") {
            console.log("display none");
            document.getElementById("hiddenFieldAddType").style.display = "inline-block";
            document.getElementById("lisaaUusiHiddenField").style.display = "none";
        } else {
            console.log("display muu");
            document.getElementById("hiddenFieldAddType").style.display = "none";
            document.getElementById("lisaaUusiHiddenField").style.display = "block";
        }


    });

    //Ajax-pyynnöllä submitataan modaali ja luodaan se uudestaan pääsivulle
    function submitModal() {
        var form = new FormData(document.getElementById("createForm"));     //Luodaan formdata-tyyppinen muuttuja, joka kerää tiedot halutulta formilta
        var detailDivCreate = parent.document.getElementById("ModalOtherSpendingCreate"); //Etsitään parentista eli index-viewstä oikea kohta, johon modaali luodaan uudestaan

        $.ajax({
            url: "/OtherSpendings/_ModalCreate",
            cache: false,
            contentType: false,
            processData: false,
            method: 'POST', //post pitää spesifioida tässä, jotta saadaan post-tyyppinen toiminto controllerissa
            type: "POST",
            data: form, //aikaisemmin mainittu formdata viedään ajax-pyynnöllä controllerille
            success: function (result) {
                console.log("Result:")
                console.log(result);
                if (result == "") { //Jos lisäys onnistui, controller palauttaa nullin
                    window.location.href = indexUrl; //Onnistumisen jälkeen käyttäjä ohjataan indexiin, jossa päivittyneet tiedot
                } else {//tallentaminen ei onnistunut, koska modelstate.isvalid ei ollut true
                    $(detailDivCreate).html(""); //tyhjennetään vanha modaali (en tiedä, onko pakollista)
                    $(detailDivCreate).replaceWith(result); //luodaan uusi modaali, jossa validate messaget
                    $("#ModalOtherSpendingCreate").modal("show");//näytetään modaali
                }

            }
        });
    };

    ////luodaan uusi kulutyyppi
    //$("#lisaaUusiType").click(function () {
    //    var formCreateType = new FormData(document.getElementById("createTypeForm"));//piilotetusta (display none) kulutyyppi-formista tehdään formdata muuttuja
    //    $.ajax({
    //        url: "/OtherSpendings/_ModalCreateOthSpendingType",
    //        cache: false,
    //        contentType: false,
    //        processData: false,
    //        method: 'POST', //jälleen post pitää olla
    //        type: "POST",
    //        data: formCreateType, //formdata viedään controlleriin
    //        success: function (result) {
    //            console.log(result);
    //            if (result == "") {
    //                updateDropdownList(); //päivitetään dropdownlist, jossa kaikki kulutyypit
    //                $("#pseudoForm").val(""); //tyhjennetään oikea ja pseudo kenttä
    //                $("#TypeName").val("");
    //            } else {//controllerilla vikaa, tähän ei pääse jostain syystä. Modelstate.isvalid on aina true, vaikka lähettäisi tyhjät tiedot
    //                console.log("epäonnistui");

    //            }
    //        }
    //    });
    //});
</script>