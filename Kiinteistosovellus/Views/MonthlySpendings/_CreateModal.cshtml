@model Kiinteistosovellus.Models.MonthlySpendings

@if (Session["UserName"] != null && Session["Role"].ToString() == "Admin")
{
    <div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalMSCreate">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header">
                    <h3>Luo uusi kuukausittainen kulu</h3>
                </div>

                <div class="modal-body">
                    @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "createMSForm" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        Aloituspvm* @Html.ValidationMessageFor(model => model.DateBegin, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.DateBegin, new { htmlAttributes = new { @Type = "date", @class = "form-control" } })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        Päättymispvm @Html.ValidationMessageFor(model => model.DateEnd, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.DateEnd, new { htmlAttributes = new { @Type = "date", @class = "form-control" } })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        Kulutustyyppi* @Html.ValidationMessageFor(model => model.SpendingTypeID, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("SpendingTypeID", null, new { @class = "form-control form-select" })
                                            <div><a class="card-link" role="button" id="lisaaUusiHiddenField">Lisää uusi kulutustyyppi</a></div>
                                        </div>
                                    </div>

                                    <div class="form-group" id="hiddenFieldAddType" style="display:none">
                                        Kulutustyyppi* <span class="field-validation-error text-danger" id="fakeErrorTypeName"></span>
                                        <div class="col-md-10 input-group">
                                            <input type="text" maxlength="100" size="500" class="form-control tyhjennaKentta" id="fakeFormTypeName" onkeyup="paivitaOikeaKenttaName()" />
                                        </div>
                                        <div class="text-danger" id="existsFake"></div>
                                        Yksikkö <span class="field-validation-error text-danger" id="fakeErrorUnit"></span>
                                        <div class="col-md-10 input-group">
                                            <input type="text" maxlength="100" size="500" class="form-control tyhjennaKentta" id="fakeFormUnit" onkeyup="paivitaOikeaKenttaUnit()" />

                                        </div>
                                        <div style="text-align: right; padding-right: 5px">
                                            <a class="card-link" role="button" id="lisaaUusiType">Lisää</a> | <a class="card-link closeAddType" role="button" id="peruuta">Peruuta</a>
                                        </div>
                                    </div>
                                    <div class="form-group" id="successfullyAddedType" style="display:none;">
                                        <div class="text-success">Tyyppi lisätty onnistuneesti</div>
                                        <div style="padding:0 3px"><a class="card-link" role="button" id="lisaaToinenTyyppi">Lisää toinen tyyppi</a> | <a class="card-link closeAddType" role="button">Poistu</a></div>
                                    </div>

                                    <div class="form-group" style="margin-top:2%">
                                        Valitse kuva
                                        <div class="col-md-10">
                                            <input type="file" id="kuvaim" name="kuvaim" accept=".jpg,.jpeg,.png" class="form-control" onchange="document.getElementById('ImageUrl').value = 'https://kiinteistoteststorage.blob.core.windows.net/pics/' + this.value.substring(12); nayta();" />
                                        </div>
                                        <input type="button" id="poistanappi" value="Poista kuva" onclick="document.getElementById('ImageUrl').value=''" />
                                    </div>
                                    <div class="form-group" id="imageinput">
                                        @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div id="error" style="display: none; color: red;"></div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group">
                                        Yksiköiden määrä @Html.ValidationMessageFor(model => model.AmountOfUnits, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @{ Html.EnableClientValidation(false); }
                                            @Html.EditorFor(model => model.AmountOfUnits, new { htmlAttributes = new { @class = "form-control" } })
                                            @{ Html.EnableClientValidation(true); }
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        Yksikön hinta @Html.ValidationMessageFor(model => model.PricePerUnit, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @{ Html.EnableClientValidation(false); }
                                            @Html.EditorFor(model => model.PricePerUnit, new { htmlAttributes = new { @class = "form-control" } })
                                            @{ Html.EnableClientValidation(true); }
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        Siirtomaksu @Html.ValidationMessageFor(model => model.TransferPayment, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @{ Html.EnableClientValidation(false); }
                                            @Html.EditorFor(model => model.TransferPayment, new { htmlAttributes = new { @class = "form-control" } })
                                            @{ Html.EnableClientValidation(true); }
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        Kokonaishinta* @Html.ValidationMessageFor(model => model.FullPrice, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @*@{ Html.EnableClientValidation(false); }*@
                                            @Html.EditorFor(model => model.FullPrice, new { htmlAttributes = new { @class = "form-control" } })
                                            @*@{ Html.EnableClientValidation(true); }*@
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        Urakoitsija @Html.ValidationMessageFor(model => model.ContractorID, "", new { @class = "text-danger realError" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("ContractorID", null, new { @class = "form-control form-select" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <input type="button" id="submitModal" style="display:none" value="Tallenna" class="btn btn-primary" />
                            </div>
                        </div>
                    }

                    <div class="modal-footer">
                        <div class="form-actions no-color">
                            <input type="button" onclick="submitModal()" value="Tallenna" class="btn btn-primary" />
                            <a href="#" id="back" data-bs-dismiss="modal" onclick='destroyDiv("ModalMSCreate")'>Takaisin</a>
                        </div>
                    </div>
                    <div id="divForPartialPseudo" style="display:none;">

                    </div>
                </div>
            </div>
        </div>
    </div>


    <script type="text/javascript">

        //checks if file is correct size and if file is a picture, shows corresponding error if not. 
        function nayta() {
            let virhe = document.getElementById("error");
            let file = document.getElementById("kuvaim").files[0];
            var fileName = document.getElementById("kuvaim").value;
            var idxDot = fileName.lastIndexOf(".") + 1;
            var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();

            if (file.size / (1024 * 1024) > 4.9 || (extFile != "jpg" && extFile != "jpeg" && extFile != "png")) {
                if (file.size / (1024 * 1024) > 4.9 && (extFile != "jpg" && extFile != "jpeg" && extFile != "png")) {
                    document.getElementById("kuvaim").value = "";
                    document.getElementById('ImageUrl').value = "";
                    virhe.innerHTML = "Tiedoston koko ei saa olla yli 5 MB.<br>Voit ladata vain .jpg-, .jpeg- tai .png-tiedostoja. Valitse uudelleen."
                    virhe.style.display = "block";
                }
                else if (file.size / (1024 * 1024) > 4.9 && (extFile == "jpg" || extFile == "jpeg" || extFile == "png")) {
                    document.getElementById("kuvaim").value = "";
                    document.getElementById('ImageUrl').value = "";
                    virhe.innerHTML = "Tiedoston koko ei saa olla yli 5 MB.<br>Valitse uudelleen."
                    virhe.style.display = "block";
                }
                else {
                    document.getElementById("kuvaim").value = "";
                    document.getElementById('ImageUrl').value = "";
                    virhe.innerHTML = "Voit ladata vain .jpg-, .jpeg- tai .png-tiedostoja. Valitse uudelleen."
                    virhe.style.display = "block";
                }
                
            } else {
                virhe.style.display = "none";
            }
              
        }

        $(document).ready(function () {
            var arvo = $("#ImageUrl").val();
            if (arvo == "") {
                $("#poistanappi").hide();
                $("#imageinput").hide();
            } else {
                $("#poistanappi").show();
                $("#imageinput").show();
            }
        });



        function paivitaOikeaKenttaName() {
            var falseFormInput = $("#fakeFormTypeName");
            var realForm = $("#TypeName");
            realForm.val(falseFormInput.val());
        }
        function paivitaOikeaKenttaUnit() {
            var falseFormInput = $("#fakeFormUnit");
            var realForm = $("#Unit");
            realForm.val(falseFormInput.val());
        }

        //Tuo tyypinlisäyskentän näkyviin---- TÄTÄ PITÄÄ  PÄIVITTÄÄ TYYLIKKÄÄMMÄKSI
        $("#lisaaUusiHiddenField").click(function () {
            partialViewGet("MonthlySpendings", "_ModalCreateMonthSpendingType", "divForPartialPseudo");
            document.getElementById("hiddenFieldAddType").style.display = "inline-block";
            document.getElementById("lisaaUusiHiddenField").style.display = "none";
        });

        $("#lisaaToinenTyyppi").click(function () {
            partialViewGet("MonthlySpendings", "_ModalCreateMonthSpendingType", "divForPartialPseudo");
            document.getElementById("hiddenFieldAddType").style.display = "inline-block";
            document.getElementById("lisaaUusiHiddenField").style.display = "none";
            document.getElementById("successfullyAddedType").style.display = "none";
        });

        $(".closeAddType").click(function () {
            document.getElementById("hiddenFieldAddType").style.display = "none";
            document.getElementById("lisaaUusiHiddenField").style.display = "block";
            document.getElementById("divForPartialPseudo").innerHTML = "";
            document.getElementById("successfullyAddedType").style.display = "none";
        });


        //luodaan uusi kulutyyppi
        $("#lisaaUusiType").click(async function () {
            partialViewSubmit("MonthlySpendings", "_ModalCreateMonthSpendingType", "divForPartialPseudo", "createTypeForm", "SpendingTypeID");
        });


        //Ajax-pyynnöllä submitataan modaali ja luodaan se uudestaan pääsivulle
        function submitModal() {
            submitModalPost("MonthlySpendings", "_CreateModal", "createMSForm", "ModalMSCreate");
        };




        $("#FullPrice").keyup(function () {
            validateKeyUp(event, "FullPrice");

        });

        $("#TransferPayment").keyup(function () {
            validateKeyUp(event, "TransferPayment");

        });

        $("#PricePerUnit").keyup(function () {
            validateKeyUp(event, "PricePerUnit");

        });

        $("#AmountOfUnits").keyup(function () {
            validateKeyUp(event, "AmountOfUnits");

        });

        //Kokonaishinnan merkkien tarkastelu
        $("#FullPrice").keypress(function () {
            ////console.log("toimii eventlistener");
            isNumberKey(event, "FullPrice");

        });

        //Siirtohinnan merkkien tarkastelu
        $("#TransferPayment").keypress(function () {
            ////console.log("toimii eventlistener");
            isNumberKey(event, "TransferPayment");
        });

        //Yksikköhinnan merkkien tarkastelu
        $("#PricePerUnit").keypress(function () {
            ////console.log("toimii eventlistener");
            isNumberKey(event, "PricePerUnit");
        });

        //Kokokaiskulutuksen merkkien tarkastelu
        $("#AmountOfUnits").keypress(function () {
            ////console.log("toimii eventlistener");
            isNumberKey(event, "AmountOfUnits");
        });

        //Reloads contractor's dropdown with empty value as first
        $(function () {
            var contractors = $('#ContractorID');
            var contractorUrl = '/Contractors/FetchContractors';
            contractors.empty();
            contractors.append($('<option></option>').val('').text(''));
            $.getJSON(contractorUrl, function (data) {
                $.each(data, function (index, item) {
                    contractors.append($('<option></option>').val(item.Value).text(item.Text));
                });
            });
        })

        //Reloads type's dropdown with empty value as first
        $(function () {
            var types = $('#SpendingTypeID');
            var typeUrl = '/MonthlySpendings/FetchTypes';
            types.empty();
            types.append($('<option></option>').val('').text(''));
            $.getJSON(typeUrl, function (data) {
                $.each(data, function (index, item) {
                    if (item.Value != 1000) {
                        types.append($('<option></option>').val(item.Value).text(item.Text));
                    }
                });
            });
        })

        function allHaveAttributes(elements, attrName, attrValue) {
            // Do all elements have given attribute?
            for (var i = 0; i < elements.length; i++) {
                if (!elements[i].hasAttribute(attrName)) return false;
            }

            //if given value...
            if (attrValue) {
                for (i = 0; i < elements.length; i++) {
                    if (elements[i].getAttribute(attrName) !== attrValue) //is different than we want
                        return false;
                }
                return true;
            } else { // if elements have the attribute we have given
                return true;
            }
        }

        $(document).ready(function () {
            dismissOrRedirectWithPartials('/monthlyspendings/index');
        });
    </script>
}
else
{
    <div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalMSCreate">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="text-center">
                        <h3>Oho!</h3>
                        <p class="lead">Näyttää siltä, ​​että et ole kirjautunut sisään!</p>
                        <a class="btn btn-primary" href="/Home/Index">Takaisin pääsivuun</a><br />
                    </div>
                </div>
            </div>
        </div>
    </div>
}